README
Reference: 
http://www.cloudera.com/documentation/enterprise/latest/topics/sg_self_signed_tls.html

CM as TLS/SSL server 
http://www.cloudera.com/documentation/enterprise/latest/topics/cm_sg_tls_browser.html

NAVIGATOR as SSL server 
http://www.cloudera.com/documentation/enterprise/latest/topics/sg_nav_ssl.html

HUE as TLS/SSL serverr
http://www.cloudera.com/documentation/enterprise/latest/topics/cm_sg_ssl_hue.html

Private Key and Certificate Reuse Across Java Keystores and OpenSSL
https://www.cloudera.com/documentation/enterprise/latest/topics/cm_sg_openssl_jks.html#concept_ek3_sdl_rp



Notes: not recommended for production
Goal: 
1. Create JKS to store public-private keypair per host.
2. Import the public key to the alternative key truststore.


Here is the instruction for single node CDH cluster:
1. Create the directories for the certificates: 
[waynezhu@cdhsn ~]$ sudo mkdir -p /opt/cloudera/security/x509/ /opt/cloudera/security/jks/

2. Generate the key pair and self-signed certificate valid for 10 years with CN=FQHN
[waynezhu@cdhsn ~]$ cd /opt/cloudera/security/jks
[waynezhu@cdhsn jks]$ sudo keytool -genkeypair -keystore cdhsn.jks -alias cdhsn  -keyalg RSA -keysize 2048 -validity 3650 -dname "CN=cdhsn, OU=DevOps, O=Cloudera, L=Chicago, ST=Illinois, C=US" -storepass changeme -keypass changeme

3. Copy default Java truststore (cacerts) to  the alternative (jssecacerts). 
[waynezhu@cdhsn jks]$ echo $JAVA_HOME
/usr/java/default
[waynezhu@cdhsn jks]$ sudo cp $JAVA_HOME/jre/lib/security/cacerts $JAVA_HOME/jre/lib/security/jssecacerts

4. Export the certificate from the keystore.
[waynezhu@cdhsn jks]$ sudo ynezhu@cdhsn jks]$ sudo keytool -export -alias cdhsn -keystore cdhsn.jks -rfc -file cdhsn-selfsigned.cer
Enter keystore password:
Certificate stored in file <cdhsn-selfsigned.cer>keytool -export -alias cdhsn -keystore cdhsn.jks -rfc -file cdhsn-selfsigned.cer

5. Copy the self-signed certificate (cdhsn-selfsigned.cer) to /opt/cloudera/security/x509/.
[waynezhu@cdhsn jks]$ sudo cp cdhsn-selfsigned.cer /opt/cloudera/security/x509/cdhsn.pem

6. Import the public key into the alternative  truststore (jssecacerts). 
[waynezhu@cdhsn jks]$ sudo keytool -import -alias cdhsn -file /opt/cloudera/security/jks/cdhsn-selfsigned.cer -keystore $JAVA_HOME/jre/lib/security/jssecacerts -storepass changeit
Owner: CN=cdhsn, OU=DevOps, O=Cloudera, L=Chicago, ST=Illinois, C=US
Issuer: CN=cdhsn, OU=DevOps, O=Cloudera, L=Chicago, ST=Illinois, C=US
Serial number: 79103186
Valid from: Mon Dec 12 18:22:37 UTC 2016 until: Thu Dec 10 18:22:37 UTC 2026
Certificate fingerprints:
	 MD5:  58:17:50:EB:37:11:A8:5C:0F:1D:C0:95:7E:56:63:2A
	 SHA1: 83:FA:A8:03:18:49:57:5D:74:FA:BA:65:1D:AA:82:BC:82:D4:1B:06
	 SHA256: 52:E8:36:6A:AC:64:D3:17:15:04:64:AC:4A:AC:DF:3F:59:5D:89:A9:7C:52:44:36:D7:15:C8:A5:52:8D:D7:BD
	 Signature algorithm name: SHA256withRSA
	 Version: 3

Extensions:

#1: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: F5 A8 00 04 EF E6 B2 AB   79 CA 55 3F DE 05 E2 F1  ........y.U?....
0010: B6 E1 5A 58                                        ..ZX
]
]

Trust this certificate? [no]:  yes
Certificate was added to keystore

7. Grant Cloudera Manager access to /opt/cloudera/security/jks
$ sudo chown -R cloudera-scm:cloudera-scm /opt/cloudera/security/jks
[waynezhu@cdhsn jks]$ sudo chown -R cloudera-scm:cloudera-scm /opt/cloudera/security/jks


Notes on HUE SSL server:
Since HUE is written in Python, it can't use JKS directory. The key pair has to be exported to PKCS12 key store first,
and then use openssl to split the public key and the private key. 
1. $ keytoolExportJKSKeyPairByAliasToPKCS12.sh /opt/cloudera/security/jks/cdhsn.jks changeme changeme cdhsn.p12 cdhsn changeme changeme
2. $ opensslConvertCertificateFromPKCS12ToPEM.sh cdhsn.p12 changeme cdsn_certificate.pem
3. $ opensslConvertPrivateKeyFromPKCS12ToPEM.sh cdhsn.p12 changeme cdhsn_privatekey.pem changeme






